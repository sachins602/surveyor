// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


model User {
    id            String    @id @default(cuid())
    role          String    @default("user")
    name          String?
    email         String?   @unique
    password      String?   
    emailVerified DateTime?
    phone         String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SurveryForm {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    questions Question[]
    responses Response[]
}

model Question {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String
    type      String
    options   Option[]
    form      SurveryForm @relation(fields: [formId], references: [id])
    formId    String
}

model Option {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String
    text      String?
    date     DateTime?
    email    String?
    phone    String?
    image    String?
    multipleChoiceOption MultipleChoiceOption?
    question  Question @relation(fields: [questionId], references: [id])
    questionId String
    answers   Answer[]
}

model MultipleChoiceOption {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    optionone      String
    optiontwo      String?
    optionthree      String?
    optionfour      String?
    optionfive      String?
    optionsix      String?
    optionseven      String?
    optioneight      String?
    optionnine      String?
    optionten      String?
    option    Option @relation(fields: [optionId], references: [id])
    optionId  String @unique
}

model Response {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    form      SurveryForm @relation(fields: [formId], references: [id])
    formId    String
    answers   Answer[]
}

model Answer {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String?
    date     DateTime?
    email    String?
    phone    String?
    multipleChoiceAnswer MultipleChoiceAnswer?
    option    Option @relation(fields: [optionId], references: [id])
    optionId  String 
    response  Response @relation(fields: [responseId], references: [id])
    responseId String
}

model MultipleChoiceAnswer {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    optionone      Boolean
    optiontwo      Boolean?
    optionthree      Boolean?
    optionfour      Boolean?
    optionfive      Boolean?
    optionsix      Boolean?
    optionseven      Boolean?
    optioneight      Boolean?
    optionnine      Boolean?
    optionten      Boolean?
    answer    Answer @relation(fields: [answerId], references: [id])
    answerId  String @unique
}
